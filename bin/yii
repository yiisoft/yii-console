#!/usr/bin/env php
<?php

declare(strict_types=1);

use Psr\Container\ContainerInterface;
use Yiisoft\Composer\Config\Builder;
use Yiisoft\Di\Container;
use Yiisoft\Yii\Console\Application;
use Yiisoft\Yii\Console\Output\ConsoleBufferedOutput;

(static function () {
    $cwd = getcwd();

    $possibleAutoloadPaths = [
        // running from project root
        $cwd . '/vendor/autoload.php',
        // running from project bin
        dirname($cwd) . '/autoload.php',
        // local dev repository
        dirname(__DIR__) . '/vendor/autoload.php',
        // dependency
        dirname(__DIR__, 4) . '/vendor/autoload.php',
    ];

    $autoloadPath = null;

    foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
        if (file_exists($possibleAutoloadPath)) {
            $autoloadPath = $possibleAutoloadPath;
            break;
        }
    }

    if ($autoloadPath === null) {
        $message = "Unable to find vendor/autoload.php in the following paths:\n\n";
        $message .= '- ' . implode("\n- ", $possibleAutoloadPaths) . "\n\n";
        $message .= "Possible fixes:\n";
        $message .= "- Install yiisoft/console via Composer.\n";
        $message .= "- Run ./yii either from project root or from vendor/bin.\n";
        fwrite(STDERR, $message);
        exit(1);
    }

    require_once $autoloadPath;

    $cliOptions = getopt('', ['config:']);

    $configsDir = '';
    if (array_key_exists('config', $cliOptions)) {
        $configsDir = is_array($cliOptions['config'])
            ? $cliOptions['config'][array_key_last($cliOptions['config'])]
            : $cliOptions['config'];
        $configsDir .= '/';
    }

    $params = (require Builder::path($configsDir . 'params'))['yiisoft/yii-console'];

    $rebuildConfig = $params['rebuildConfig'] instanceof Closure
        ? $params['rebuildConfig']()
        : $params['rebuildConfig'];

    if ($rebuildConfig) {
        // Don't do it in production, assembling takes it's time
        Builder::rebuild();
    }

    $container = new Container(
        require Builder::path($configsDir . 'console'),
        require Builder::path($configsDir . 'providers-console')
    );

    /** @var ContainerInterface $container */
    $container = $container->get(ContainerInterface::class);

    $application = $container->get(Application::class);
    $exitCode = 1;

    try {
        $application->start();
        $exitCode = $application->run(null, new ConsoleBufferedOutput());
    } catch (\Error $error) {
        $application->renderThrowable($error, new ConsoleBufferedOutput());
    } finally {
        $application->shutdown($exitCode);
        exit($exitCode);
    }
})();

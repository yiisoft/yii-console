#!/usr/bin/env php
<?php

use hiqdev\composer\config\Builder;
use yii\di\Container;
use yii\helpers\Yii;
use Yiisoft\Yii\Console\ArgvInput;
use Yiisoft\Yii\Console\ConsoleOutput;

// define STDIN, STDOUT and STDERR if the PHP SAPI did not define them (e.g. creating console application in web env)
// http://php.net/manual/en/features.commandline.io-streams.php
defined('STDIN') or define('STDIN', fopen('php://stdin', 'r'));
defined('STDOUT') or define('STDOUT', fopen('php://stdout', 'w'));
defined('STDERR') or define('STDERR', fopen('php://stderr', 'w'));

(static function () {
    $cwd = getcwd();

    $possibleAutoloadPaths = [
        // local dev repository
        dirname(__DIR__) . '/vendor/autoload.php',
        // dependency
        dirname(__DIR__, 4) . '/vendor/autoload.php',
        // running from project root
        $cwd . '/vendor/autoload.php',
        // running from project bin
        dirname($cwd) . '/autoload.php',
    ];
    $autoloadPath = null;
    foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
        if (file_exists($possibleAutoloadPath)) {
            $autoloadPath = $possibleAutoloadPath;
            break;
        }
    }

    if ($autoloadPath === null) {
        $message = "Unable to find vendor/autoload.php in the following paths:\n\n";
        $message .= '- ' . implode("\n- ", $possibleAutoloadPaths) . "\n\n";
        $message .= "Possible fixes:\n";
        $message .= "- Install yiisoft/console via Composer.\n";
        $message .= "- Run ./yii either from project root or from vendor/bin.\n";
        fwrite(STDERR, $message);
        exit(1);
    }
    require_once $autoloadPath;

    $container = new Container(require Builder::path('console'));
    //Yii::setContainer($container);

    $container->set('serve', \Yiisoft\Yii\Console\Command\Serve::class);

    //$container->get('app')->run();

    $app = new \Symfony\Component\Console\Application('Yii Console', '1.0');
    $loader = new \Symfony\Component\Console\CommandLoader\ContainerCommandLoader($container, [
        'serve' => 'serve',
        //'server' => 'serve', //TODO: why doesn't it work?
    ]);
    $app->setCommandLoader($loader);
    $app->run();
})();
